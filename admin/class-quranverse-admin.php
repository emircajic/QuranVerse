<?php

/**
 * The admin-specific functionality of the plugin.
 *
 * @link       https://istina.ba
 * @since      1.0.0
 *
 * @package    Quranverse
 * @subpackage Quranverse/admin
 */

/**
 * The admin-specific functionality of the plugin.
 *
 * Defines the plugin name, version, and two examples hooks for how to
 * enqueue the admin-specific stylesheet and JavaScript.
 *
 * @package    Quranverse
 * @subpackage Quranverse/admin
 * @author     Emir Cajic <e.cajic@gmail.com>
 */
class Quranverse_Admin {

	/**
	 * The ID of this plugin.
	 *
	 * @since    1.0.0
	 * @access   private
	 * @var      string    $plugin_name    The ID of this plugin.
	 */
	private $plugin_name;

	/**
	 * The version of this plugin.
	 *
	 * @since    1.0.0
	 * @access   private
	 * @var      string    $version    The current version of this plugin.
	 */
	private $version;

	/**
	 * Hook suffix generated by add_options_page,
	 * so that we can reference it later with various hooks in the admin area
	 *
	 * @var   string  $plugin_screen_hook_suffix   Hook suffix generated by add_options_page
	 */
	private $plugin_screen_hook_suffix;

	private $available_translations_list;

	/**
	 * Initialize the class and set its properties.
	 *
	 * @since    1.0.0
	 * @param      string    $plugin_name       The name of this plugin.
	 * @param      string    $version    The version of this plugin.
	 */
	public function __construct( $plugin_name, $version ) {

		$this->plugin_name = $plugin_name;
		$this->version = $version;
		$this->available_translations_list = $this->load_available_translations_list();

	}

	/**
	 * Register the stylesheets for the admin area.
	 *
	 * @since    1.0.0
	 */
	public function enqueue_styles() {

		/**
		 * This function is provided for demonstration purposes only.
		 *
		 * An instance of this class should be passed to the run() function
		 * defined in Quranverse_Loader as all of the hooks are defined
		 * in that particular class.
		 *
		 * The Quranverse_Loader will then create the relationship
		 * between the defined hooks and the functions defined in this
		 * class.
		 */

		wp_enqueue_style( $this->plugin_name, plugin_dir_url( __FILE__ ) . 'css/quranverse-admin.css', array(), $this->version, 'all' );

	}

	/**
	 * Register the JavaScript for the admin area.
	 *
	 * @since    1.0.0
	 */
	public function enqueue_scripts() {

		/**
		 * This function is provided for demonstration purposes only.
		 *
		 * An instance of this class should be passed to the run() function
		 * defined in Quranverse_Loader as all of the hooks are defined
		 * in that particular class.
		 *
		 * The Quranverse_Loader will then create the relationship
		 * between the defined hooks and the functions defined in this
		 * class.
		 */

		wp_enqueue_script( $this->plugin_name, plugin_dir_url( __FILE__ ) . 'js/quranverse-admin.js', array( 'jquery' ), $this->version, false );

	}
	/**
	 * Add an options page under the Settings submenu
	 *
	 * @since  0.1.1
	 */
	public function add_options_page() {

		$this->plugin_screen_hook_suffix = add_options_page(
			__( 'QuranVerse Settings', 'quranverse' ),
			__( 'QuranVerse', 'quranverse' ),
			'manage_options',
			$this->plugin_name,
			array( $this, 'display_options_page' )
		);

	}
	/**
	 * Render the options page for plugin
	 *
	 * @since  0.1.1
	 */
	public function display_options_page() {
		include_once 'partials/quranverse-admin-display.php';
	}
	/**
	 * Add settings action link to the plugins page.
	 *
	 * @since    0.1.1
	 */

	public function add_action_links( $links ) {
		/*
		*  Documentation : https://codex.wordpress.org/Plugin_API/Filter_Reference/plugin_action_links_(plugin_file_name)
		*/
		$settings_link = array(
			'<a href="' . admin_url( 'options-general.php?page=' . $this->plugin_name ) . '">' . __('Settings', $this->plugin_name) . '</a>',
		);
		return array_merge(  $settings_link, $links );

	}

	/**
	 * Handler to display notices in admin area
	 *
	 * @since 0.1.1
	 */
	public function display_admin_notices() {
		$screen = get_current_screen();
		if ( get_option('quranverse_needs_setup') && ($screen->id != $this->plugin_screen_hook_suffix) ) {
			$class             = 'notice notice-warning';
			$message           = __( 'The installation of the Quranverse plugin was successful. Please head on to %1$sthe plugin settings page%2$s and choose initial preferences to make the plugin active.', 'quranverse' );
			$settings_url      = admin_url( 'options-general.php?page=' . $this->plugin_name );
			$message_formatted = sprintf( $message, '<a href="' . $settings_url . '">', '</a>' );
			echo wp_kses( sprintf( '<div class="%1$s"><p>%2$s</p></div>', esc_attr( $class ), $message_formatted ), array( 'a'   => array( 'href' => array() ),
			                                                                                                               'div' => array( 'class' => array() ),
			                                                                                                               'p'   => array()
			) );
		}
	}

	/**
	 * Returns an array of all available translations with info for install
	 *
	 * @return array Associative array of available translations grouped by language
	 *
	 * TODO: make the file load from a remote server, together with available language installations.
	 */
	public function load_available_translations_list() {
		$json = file_get_contents(QVPATH.'includes/sources/translation_list.json');
		return json_decode($json, true);
	}

	/**
	 * Parses the database for available translations and returns them in a simple array.
	 *
	 * @return array of translations
	 */
	public function load_existing_translations_list() {
		global $wpdb;
		$table_name = $wpdb->prefix."quran";
		$cols_sql = "SHOW COLUMNS FROM $table_name WHERE Field LIKE 'tr\_%'";
		$all_objects = $wpdb->get_col( $cols_sql, 0);
		foreach ($all_objects as &$item) {
			$item = substr($item,3);
		}
		return $all_objects;
	}

	/**
	 * Handler for admin-init, registers the quranverse setting and defines the validation function.
	 */
	public function options_update() {
		register_setting('quranverse', 'quranverse', array($this, 'validate'));
	}

	/**
	 * Validates the options of the settings page and, if the validation succedes passes
	 * the validated values for serialization. Also performs the installation and removal
	 * of the selected and unselected translations.
	 *
	 * @param $input - Array of quranverse settings taken from the main settings page
	 *
	 * @return array|bool Returns either an array of validated settings or false if the validation fails
	 */
	public function validate($input) {
		// All checkboxes inputs
		$valid = array();

		$available_translations = $this->array_column_recursive($this->available_translations_list,'col_name' );
		$installed_translations = $this->load_existing_translations_list();
		$checked_translations = array_keys($input['translations']);

		if (!$checked_translations){
			add_settings_error(
				'quranverse[translations]',
				'no_selected_translations',
				'You must choose at least one translation.',
				'error'
			);
			return false;
		}



		$add_list = array_diff($checked_translations, $installed_translations);
		$remove_list = array_diff($installed_translations, $checked_translations);

		if (count($add_list)>1){
			add_settings_error(
				'quranverse[translations]',
				'too_many_translations_to_add',
				'Please choose only one translation. You can add only one translation at a time.',
				'error'
			);
			return false;
		}

		$this->remove_translations($remove_list);
		$this->add_translations($add_list);

		$valid=$input;

		delete_option('quranverse_needs_setup');
		return $valid;
	}

	/**
	 * Walks through nested associative array looking for values of specified keys
	 *
	 * @param array $haystack
	 * @param $needle
	 *
	 * @return array
	 */
	public function array_column_recursive(array $haystack, $needle) {
		$found = [];
		array_walk_recursive($haystack, function($value, $key) use (&$found, $needle) {
			if ($key == $needle)
				$found[] = $value;
		});
		return $found;
	}

	/**
	 * Removes the specified array of translations from the database.
	 *
	 * @param $remove_list - Array of translations marked for removal
	 */
	public function remove_translations($remove_list){
		foreach ($remove_list as $translation) {
			global $wpdb;
			$table_name = $wpdb->prefix . 'quran';
			$sql = "ALTER TABLE $table_name DROP COLUMN tr_$translation";
			$count_posts = $wpdb->get_var($sql);
		}
	}

	/**
	 * Adds the specified array of translations into the database.
	 *
	 * @param $add_list - Array of translations marked for addition
	 */
	public function add_translations($add_list){
		foreach ($add_list as $translation){
			global $wpdb;
			$table_name = $wpdb->prefix . 'quran';
			$sql = "ALTER TABLE $table_name ADD tr_$translation text";
			$wpdb->query($sql);

			$handle = fopen(QVPATH.'includes/sources/translations/'.$translation.'.txt', 'r');
			$row = 1;
			while ($row<=6236) {
				$aya = fgets($handle);
				$wpdb->update($table_name, array("tr_$translation" => rtrim($aya)), array('index'=>$row));
				$row++;
			}
		}
	}
}
